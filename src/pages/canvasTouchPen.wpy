<script>
/**
    wx.getImageInfo ctx.drawImage() 将图片绘到Canvas中
    wx.canvasToTempFilePath() 把画布转成图片
    wx.saveImageToPhotosAlbum() 保存到相册中
**/ 
import wepy from 'wepy';
import { request,toast,vailPhone } from '../utils/request'
export default class canvasTouchPen extends wepy.page {
    config = {
        navigationBarTitleText: '',
        disableScroll:true,
        backgroundColor:'#313131',
    };
    components = {};

    data = {
        canvasImg:'https://api.zhizubaba.com//uploads/thumb/0P8zwn5W1mdmZUXJpJ36D4EfFXiQs6PW9ORebrHt.jpeg',
        canvasName: 'handWriting',
        ctx: '',
        canvasWidth: 0,
        canvasHeight: 0,
        linePrack: [], //划线轨迹 , 生成线条的实际点
        currentLine: [],
        transparent: 1, // 透明度
        pressure: 0.5, // 默认压力
        smoothness: 100,  //顺滑度，用60的距离来计算速度
        lineSize: 1.5,  // 笔记倍数
        lineMin: 0.5,   // 最小笔画半径
        lineMax: 2,     // 最大笔画半径
        currentPoint: {},
        firstTouch: true, // 第一次触发
        radius: 1, //画圆的半径
        cutArea: { top: 0, right: 0, bottom: 0, left: 0 }, //裁剪区域
        lastPoint: 0,
        chirography: [], //笔迹
        startY: 0,
        deltaY: 0,
        startValue: 0,
        // 视图数据
        selectColor: 'black',
        lineColor: '#1A1A1A', // 颜色
        slideValue: 50,
        penShow:false, //调整触笔粗细slider隐藏
    };
    methods = {
        // 选择画笔颜色
        selectColorEvent (event) {
            var color = event.currentTarget.dataset.colorValue; //画笔颜色
            var colorSelected = event.currentTarget.dataset.color;
            this.selectColor = colorSelected,
            this.lineColor = color
        },
        // 重绘
        retDraw () {
            this.ctx.clearRect(0, 0, 700, 730)
            this.ctx.draw()
            this.drawImage(this.canvasWidth,this.canvasHeight)
        },
        // 笔迹粗细滑块
        onTouchStart(event) {
            this.startY = event.touches[0].clientY;
            this.startValue = this.format(this.slideValue)
        },
        onTouchMove(event) {
            const touch = event.touches[0];
            this.deltaY = touch.clientY - this.startY;
            this.updateValue(this.startValue + this.deltaY);
        },
        onTouchEnd () {
            this.updateValue(this.slideValue, true);
            switch (this.slideValue) {
            case 0:
                this.lineSize = 0.1;
                this.lineMin = 0.1;
                this.lineMax = 0.1;
                break;
            case 25:
                this.lineSize = 1;
                this.lineMin = 0.5;
                this.lineMax = 2;
                break;
            case 50:
                this.lineSize = 1.5;
                this.lineMin = 1;
                this.lineMax = 3;
                break;
            case 75:
                this.lineSize = 1.5;
                this.lineMin = 2;
                this.lineMax = 3.5;
                break;
            case 100:
                this.lineSize = 3;
                this.lineMin = 2;
                this.lineMax = 3.5;
                break;
            }
        },
        // 笔迹开始
        uploadScaleStart (e) {
            this.penShow = false
            if (e.type != 'touchstart') return false;
            this.ctx.setFillStyle(this.lineColor);  // 初始线条设置颜色
            this.ctx.setGlobalAlpha(this.transparent);  // 设置半透明
            this.currentPoint = {
                x: e.touches[0].x,
                y: e.touches[0].y
            }
            this.currentLine.unshift({
                time: new Date().getTime(),
                dis: 0,
                x: this.currentPoint.x,
                y: this.currentPoint.y
            })
            if (this.firstTouch) {
                this.cutArea = { top: this.currentPoint.y, right: this.currentPoint.x, bottom: this.currentPoint.y, left: this.currentPoint.x }
                this.firstTouch = false
            }
            this.pointToLine(this.currentLine);
        },
        // 笔迹移动
        uploadScaleMove (e) {
            if (e.type != 'touchmove') return false;
            if (e.cancelable) {
                // 判断默认行为是否已经被禁用
                if (!e.defaultPrevented) {
                e.preventDefault();
                }
            }
            let point = {
                x: e.touches[0].x,
                y: e.touches[0].y
            }
            //测试裁剪
            if (point.y < this.cutArea.top) {
                this.cutArea.top = point.y;
            }
            if (point.y < 0) this.cutArea.top = 0;

            if (point.x > this.cutArea.right) {
                this.cutArea.right = point.x;
            }
            if (this.canvasWidth - point.x <= 0) {
                this.cutArea.right = this.canvasWidth;
            }
            if (point.y > this.cutArea.bottom) {
                this.cutArea.bottom = point.y;
            }
            if (this.canvasHeight - point.y <= 0) {
                this.cutArea.bottom = this.canvasHeight;
            }
            if (point.x < this.cutArea.left) {
                this.cutArea.left = point.x;
            }
            if (point.x < 0) this.cutArea.left = 0;

            this.lastPoint = this.currentPoint;
            this.currentPoint = point
            this.currentLine.unshift({
                time: new Date().getTime(),
                dis: this.distance(this.currentPoint, this.lastPoint, 'move'),
                x: point.x,
                y: point.y
            })
            this.pointToLine(this.currentLine);
        },
        // 笔迹结束
        uploadScaleEnd (e) {
            if (e.type != 'touchend') return 0;
            let point = {
                x: e.changedTouches[0].x,
                y: e.changedTouches[0].y
            }
            this.lastPoint = this.currentPoint;
            this.currentPoint = point
            this.currentLine.unshift({
                time: new Date().getTime(),
                dis: this.distance(this.currentPoint, this.lastPoint, 'end'),
                x: point.x,
                y: point.y
            })
            if (this.currentLine.length > 2) {
                var info = (this.currentLine[0].time - this.currentLine[this.currentLine.length - 1].time) / this.currentLine.length;
                //$("#info").text(info.toFixed(2));
            }
            //一笔结束，保存笔迹的坐标点，清空，当前笔迹
            //增加判断是否在手写区域；
            this.pointToLine(this.currentLine);
            var currentChirography = {
                lineSize: this.lineSize,
                lineColor: this.lineColor
            };
            this.chirography.unshift(currentChirography);
            this.linePrack.unshift(this.currentLine);
            this.currentLine = []
        },
        //触笔显示
        sliderPenSize(){
            this.penShow = !this.penShow
        },
        // 保存至系统相册
        saveImg(e){
            //画布生成图片
            wx.canvasToTempFilePath({
                x: 0,
                y: 0,
                width: this.canvasWidth,
                height: this.canvasHeight,
                destWidth: this.canvasWidth,
                destHeight: this.canvasHeight,
                canvasId: 'handWriting',
                success:  (res)=> {
                    // console.log(res.tempFilePath);
                    wx.saveImageToPhotosAlbum({
                        filePath: res.tempFilePath,
                        success(res) {
                            toast('以保存至相册','success')
                        },
                        fail(res){
                            // if(res.errMsg == "saveImageToPhotosAlbum:fail auth deny"){
                                wx.showModal({
                                    title: '授权提示',
                                    content: '您已拒绝访问相册授权，如需将图片保存至相册请点击‘确定’以获取用户授权设置',
                                    showCancel: true,
                                    cancelText: '取消',
                                    cancelColor: '#000000',
                                    confirmText: '确定',
                                    confirmColor: '#3CC51F',
                                    success: res => {
                                        if(res.confirm){
                                            wx.openSetting({
                                                success:(res)=>{
                                                    if(res.authSetting['scope.writePhotosAlbum']){
                                                        toast('授权成功，请重新保存')
                                                    }
                                                }
                                            })
                                        }
                                    }
                                });
                            // }
                        }
                    })
                },
                fail: (res)=> {
                    console.log(res)
                }
            })
        }
    };

    events = {};
    onReady(){
        //创建节点选择器
        let query = wx.createSelectorQuery();
        query.select('.canvasBox').boundingClientRect()
        query.exec((result) => {
            this.canvasWidth = result[0].width;
            this.canvasHeight = result[0].height;
            this.$apply()
            this.drawImage(result[0].width,result[0].height)
        })
    };
    onLoad(options) {
        this.canvasImg = options.canvasImg
        this.ctx = wx.createCanvasContext(this.canvasName)
    };
    // 将图片绘到Canvas中
    drawImage(imgWidth,imgHeight){
        let promise1 = new Promise( (resolve, reject)=> {
            /* 获得要在画布上绘制的图片 */
            wx.getImageInfo({
                src: this.canvasImg,
                success:  (res)=> {
                    resolve(res);
                }
            })
        });
        Promise.all([promise1]).then(res => {
            console.log(res[0].path)
            /* 创建 canvas 画布 */
            const ctx = wx.createCanvasContext('handWriting')
            ctx.save()
            /* ps: 网络图片的话 就不用加../../路径了 '../../' + */
            ctx.drawImage(res[0].path, 0, 0, imgWidth, imgHeight)
            /* 绘制 */
            ctx.restore()
            ctx.draw()
        })
    }

    //画两点之间的线条；参数为:line，会绘制最近的开始的两个点；
    pointToLine (line) {
        this.calcBethelLine(line);
        // this.calcBethelLine1(line);
        return;
    }
    //计算插值的方式；
    calcBethelLine (line) {
        if (line.length <= 1) {
        line[0].r = this.radius;
        return;
        }
        let x0, x1, x2, y0, y1, y2, r0, r1, r2, len, lastRadius, dis = 0, time = 0, curveValue = 0.5;
        if (line.length <= 2) {
        x0 = line[1].x
        y0 = line[1].y
        x2 = line[1].x + (line[0].x - line[1].x) * curveValue;
        y2 = line[1].y + (line[0].y - line[1].y) * curveValue;
        //x2 = line[1].x;
        //y2 = line[1].y;
        x1 = x0 + (x2 - x0) * curveValue;
        y1 = y0 + (y2 - y0) * curveValue;;

        } else {
        x0 = line[2].x + (line[1].x - line[2].x) * curveValue;
        y0 = line[2].y + (line[1].y - line[2].y) * curveValue;
        x1 = line[1].x;
        y1 = line[1].y;
        x2 = x1 + (line[0].x - x1) * curveValue;
        y2 = y1 + (line[0].y - y1) * curveValue;
        }
        //从计算公式看，三个点分别是(x0,y0),(x1,y1),(x2,y2) ；(x1,y1)这个是控制点，控制点不会落在曲线上；实际上，这个点还会手写获取的实际点，却落在曲线上
        len = this.distance({ x: x2, y: y2 }, { x: x0, y: y0 }, 'calc');
        lastRadius = this.radius;
        for (let n = 0; n < line.length - 1; n++) {
        dis += line[n].dis;
        time += line[n].time - line[n + 1].time;
        if (dis > this.smoothness) break;
        }
        this.radius = Math.min(time / len * this.pressure + this.lineMin, this.lineMax) * this.lineSize
        line[0].r = this.radius;
        //计算笔迹半径；
        if (line.length <= 2) {
        r0 = (lastRadius + this.radius) / 2;
        r1 = r0;
        r2 = r1;
        //return;
        } else {
        r0 = (line[2].r + line[1].r) / 2;
        r1 = line[1].r;
        r2 = (line[1].r + line[0].r) / 2;
        }
        let n = 5;
        let point = [];
        for (let i = 0; i < n; i++) {
        let t = i / (n - 1);
        let x = (1 - t) * (1 - t) * x0 + 2 * t * (1 - t) * x1 + t * t * x2;
        let y = (1 - t) * (1 - t) * y0 + 2 * t * (1 - t) * y1 + t * t * y2;
        let r = lastRadius + (this.radius - lastRadius) / n * i;
        point.push({ x: x, y: y, r: r });
        if (point.length == 3) {
            let a = this.ctaCalc(point[0].x, point[0].y, point[0].r, point[1].x, point[1].y, point[1].r, point[2].x, point[2].y, point[2].r);
            a[0].color = this.lineColor;
            this.bethelDraw(a, 1);
            point = [{ x: x, y: y, r: r }];
        }
        }
    }
    //求两点之间距离
    distance (a, b, type) {
        let x = b.x - a.x;
        let y = b.y - a.y;
        return Math.sqrt(x * x + y * y) * 5;
    }
    ctaCalc (x0, y0, r0, x1, y1, r1, x2, y2, r2) {
        let a = [], vx01, vy01, norm, n_x0, n_y0, vx21, vy21, n_x2, n_y2;
        vx01 = x1 - x0;
        vy01 = y1 - y0;
        norm = Math.sqrt(vx01 * vx01 + vy01 * vy01 + 0.0001) * 2;
        vx01 = vx01 / norm * r0;
        vy01 = vy01 / norm * r0;
        n_x0 = vy01;
        n_y0 = -vx01;
        vx21 = x1 - x2;
        vy21 = y1 - y2;
        norm = Math.sqrt(vx21 * vx21 + vy21 * vy21 + 0.0001) * 2;
        vx21 = vx21 / norm * r2;
        vy21 = vy21 / norm * r2;
        n_x2 = -vy21;
        n_y2 = vx21;
        a.push({ mx: x0 + n_x0, my: y0 + n_y0, color: "#1A1A1A" });
        a.push({ c1x: x1 + n_x0, c1y: y1 + n_y0, c2x: x1 + n_x2, c2y: y1 + n_y2, ex: x2 + n_x2, ey: y2 + n_y2 });
        a.push({ c1x: x2 + n_x2 - vx21, c1y: y2 + n_y2 - vy21, c2x: x2 - n_x2 - vx21, c2y: y2 - n_y2 - vy21, ex: x2 - n_x2, ey: y2 - n_y2 });
        a.push({ c1x: x1 - n_x2, c1y: y1 - n_y2, c2x: x1 - n_x0, c2y: y1 - n_y0, ex: x0 - n_x0, ey: y0 - n_y0 });
        a.push({ c1x: x0 - n_x0 - vx01, c1y: y0 - n_y0 - vy01, c2x: x0 + n_x0 - vx01, c2y: y0 + n_y0 - vy01, ex: x0 + n_x0, ey: y0 + n_y0 });
        a[0].mx = a[0].mx.toFixed(1);
        a[0].mx = parseFloat(a[0].mx);
        a[0].my = a[0].my.toFixed(1);
        a[0].my = parseFloat(a[0].my);
        for (let i = 1; i < a.length; i++) {
        a[i].c1x = a[i].c1x.toFixed(1);
        a[i].c1x = parseFloat(a[i].c1x);
        a[i].c1y = a[i].c1y.toFixed(1);
        a[i].c1y = parseFloat(a[i].c1y);
        a[i].c2x = a[i].c2x.toFixed(1);
        a[i].c2x = parseFloat(a[i].c2x);
        a[i].c2y = a[i].c2y.toFixed(1);
        a[i].c2y = parseFloat(a[i].c2y);
        a[i].ex = a[i].ex.toFixed(1);
        a[i].ex = parseFloat(a[i].ex);
        a[i].ey = a[i].ey.toFixed(1);
        a[i].ey = parseFloat(a[i].ey);
        }
        return a;
    }
    bethelDraw (point, is_fill, color) {
        this.ctx.beginPath();
        this.ctx.moveTo(point[0].mx, point[0].my);
        if (undefined != color) {
        this.ctx.setFillStyle(color);
        this.ctx.setStrokeStyle(color);
        } else {
        this.ctx.setFillStyle(point[0].color);
        this.ctx.setStrokeStyle(point[0].color);
        }
        for (let i = 1; i < point.length; i++) {
        this.ctx.bezierCurveTo(point[i].c1x, point[i].c1y, point[i].c2x, point[i].c2y, point[i].ex, point[i].ey);
        }
        this.ctx.stroke();
        if (undefined != is_fill) {
        this.ctx.fill(); //填充图形 ( 后绘制的图形会覆盖前面的图形, 绘制时注意先后顺序 )
        }
        this.ctx.draw(true)
    }
    format(value) {
        return Math.round(Math.max(0, Math.min(value, 100)) / 25) * 25;
    }
    updateValue(slideValue, end) {
        slideValue = this.format(slideValue);
        this.slideValue =slideValue
    }
}
</script>

<template lang="wxml">
    <view class="topSavebox">
        <image src="../images/cart_icon@2x.png" />
        <button @tap='saveImg'>保存</button>
    </view>
    <view class="canvasBox">
        <canvas 
            canvas-id="handWriting" 
            disable-scroll
            @touchstart="uploadScaleStart" 
            @touchmove="uploadScaleMove" 
            @touchend="uploadScaleEnd" 
            style='height:100%;width:100%'>
        </canvas>
    </view>
    <view class="bottomFixedBox">
        <view class="canvasPenLeft">         
            <image class="pen" src="../images/brush_fill@2x.png"/>
            <view class="penSize" @tap='sliderPenSize'>
                <image class="penSize_" src="../images/dx_icon@2x.png" />
                <view class="penText">笔触</view>
                <view class="penSlider {{penShow?'penSliderHeight':''}}">
                    <view class="slide-wrapper">
                        <view class="drop" 
                        bind:touchstart="onTouchStart"
                        catch:touchmove="onTouchMove"
                        bind:touchend="onTouchEnd"
                        style="left: {{ slideValue * 2 }}rpx"></view>
                        <image class="slide" src="http://img.zhizubaba.com/qEkZViTZ2P8wHGfTKK9Y0M8e2tpluU1qPoIXlR1s.png" />
                    </view>
                </view>
            </view>
            <view catchtap="selectColorEvent" class="penColorBlack {{selectColor == 'black'?'selectColor':''}}" data-color="black" data-color-value="#1A1A1A"><view class="colorSign"></view><view class="colorText">颜色</view></view>
            <view catchtap="selectColorEvent" class="penColorRed {{selectColor == 'red'?'selectColor':''}}" data-color="red" data-color-value="#ca262a"><view class="colorSign" ></view><view class="colorText">颜色</view></view>
        </view>
        <image class="reset" catchtap="retDraw" src="../images/back_icon@2x.png" />
    </view>
</template>

<style lang="less">
    page{
        background-color: #313131;
    }
    .topSavebox{
        width: 100%;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 40rpx 35rpx;
        image{
            width: 50rpx;
            height: 42rpx;
        }
        button{
            line-height: normal;
            border-radius: 0;
            margin-left: 40rpx;
            padding-left: 20rpx;
            color: #fff;
            background-color: #313131;
            font-size: 33rpx;
        }
    }
    .bottomFixedBox{
        width: 100%;
        display: flex;
        align-items: flex-end;
        padding: 0rpx 30rpx 65rpx 20rpx;
        justify-content: space-between;
        position: fixed;
        bottom: 0;
        .canvasPenLeft{
            flex: 1;
            display: flex;
            justify-content: space-around;
            align-items: flex-end;
            padding-right: 114rpx;
            .pen{
                width: 115rpx;
                height: 115rpx;
                transform: translateY(4rpx);
            }
            .penSize{
                position: relative;
                width: 98rpx;
                height: 98rpx;
                .penSize_{
                    width: 98rpx;
                    height: 98rpx;
                }
                .penText{
                    color: #fff;
                    position: absolute;
                    width: 98rpx;
                    text-align: center;
                    font-size: 26rpx;
                    left: 0;
                    bottom: -50rpx;
                }
                .penSlider{
                    position: absolute;
                    width: 55rpx;
                    height: 0rpx;
                    left: 0;
                    right: 0;
                    top:-270rpx;
                    margin: auto;
                    overflow: hidden;
                    transition: height .5s;
                }
            }
            .penColorBlack,.penColorRed{
                position: relative;
                width: 94rpx;
                height: 94rpx;
                background-color: rgb(175, 175, 175);
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                .colorSign{
                    width: 71rpx;
                    height: 71rpx;
                    background-color: #000;
                    border-radius: 50%;
                }
                .colorText{
                    color: #fff;
                    position: absolute;
                    width: 98rpx;
                    text-align: center;
                    font-size: 26rpx;
                    left: 0;
                    bottom: -50rpx;
                }
            }
            .penColorRed .colorSign{
                background-color: red;
            }
        }
        .reset{
            width: 95rpx;
            height: 95rpx;
        }
    }
    .canvasBox{
        margin-top: 50rpx;
        width: 100%;
        height: 610rpx;
    }

    .slide-wrapper {
        width: 250rpx;
        height: 30rpx;
        transform: rotate(90deg);
        position: absolute;
        bottom: 112rpx;
        left: -97rpx;
    }
    .drop {
        width: 50rpx;
        height: 50rpx;
        border-radius: 50%;
        background: #FFF;
        position: absolute;
        left: 0rpx;
        top: -10rpx;
        box-shadow: 0px 1px 5px #888888;
    }

    .slide {
        width: 250rpx;
        height: 30rpx;
    }
    .penSliderHeight{
        height: 259rpx !important;
    }
    .selectColor{
        background-color: #fff !important;
    }
</style>